#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Oga
  class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 143)

  def initialize(options = {})
    @lexer = Lexer.new(options)
  end

  def reset
    @lines  = []
    @line   = 1
    @column = 1
  end

  def s(type, *children)
    return AST::Node.new(
      type,
      children.flatten,
      :line   => @line,
      :column => @column
    )
  end

  def next_token
    type, value, line, column = @tokens.shift

    @line   = line if line
    @column = column if column

    return type ? [type, value] : [false, false]
  end

  def on_error(type, value, stack)
    name      = token_to_str(type)
    line_str  = @lines[@line - 1]
    indicator = '~' * (@column - 1) + '^'

    raise Racc::ParseError, <<-EOF.strip
Failed to parse the supplied input.

Reason:   unexpected #{name} with value #{value.inspect}
Location: line #{@line}, column #{@column}

Offending code:

#{line_str}
#{indicator}

Current stack:

#{stack.inspect}
    EOF
  end

  def parse(string)
    @lines  = string.lines
    @tokens = @lexer.lex(string)
    ast     = do_parse

    reset

    return ast
  end

# vim: set ft=racc:
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,    14,     9,    22,    32,    10,    14,    11,    13,    13,
    21,    45,    14,     9,    13,    33,    10,    20,    11,    29,
    13,    44,    19,    31,    43,    26,    30,    17,    18,    27,
    28,    41,    42,    26,    15,    13,    14,    49 ]

racc_action_check = [
    34,     2,     2,    11,    20,     2,    23,     2,    34,     2,
    11,    34,     0,     0,    23,    22,     0,    10,     0,    15,
     0,    31,    10,    18,    31,    24,    18,     9,     9,    13,
    13,    26,    28,    12,     1,    35,    38,    44 ]

racc_action_pointer = [
     9,    34,    -2,   nil,   nil,   nil,   nil,   nil,   nil,    22,
    14,     0,    18,    17,   nil,    19,   nil,   nil,    21,   nil,
    -4,   nil,     5,     3,    10,   nil,    29,   nil,    20,   nil,
   nil,    19,   nil,   nil,    -3,    24,   nil,   nil,    33,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -37,    -1,    -4,    -5,    -6,    -7,    -8,    -9,   -37,
   -37,   -37,   -29,   -37,   -34,   -37,    -3,   -10,   -37,   -14,
   -37,   -16,   -37,   -25,   -28,   -31,   -32,   -19,   -37,    50,
   -11,   -37,   -15,   -17,   -37,   -27,   -22,   -24,   -26,   -36,
   -30,   -33,   -20,   -12,   -37,   -18,   -23,   -21,   -35,   -13 ]

racc_goto_table = [
    39,    36,    25,    23,     3,    37,    16,    34,     2,    24,
     1,    39,    36,    47,    40,    48,    46 ]

racc_goto_check = [
     8,     7,    16,    10,     3,    13,     3,    11,     2,    15,
     1,     8,     7,     7,    16,     8,    13 ]

racc_goto_pointer = [
   nil,    10,     8,     4,   nil,   nil,   nil,   -22,   -23,   nil,
    -9,   -16,   nil,   -18,   nil,    -3,   -10 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,    12,
   nil,   nil,    35,   nil,    38,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 17, :_reduce_1,
  0, 17, :_reduce_2,
  2, 18, :_reduce_3,
  1, 18, :_reduce_4,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  2, 20, :_reduce_10,
  3, 20, :_reduce_11,
  4, 20, :_reduce_12,
  5, 20, :_reduce_13,
  2, 21, :_reduce_14,
  3, 21, :_reduce_15,
  2, 22, :_reduce_16,
  3, 22, :_reduce_17,
  4, 23, :_reduce_18,
  2, 25, :_reduce_19,
  3, 25, :_reduce_20,
  2, 28, :_reduce_21,
  1, 28, :_reduce_none,
  2, 27, :_reduce_23,
  1, 27, :_reduce_none,
  0, 27, :_reduce_25,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 26, :_reduce_28,
  0, 26, :_reduce_29,
  2, 31, :_reduce_30,
  1, 31, :_reduce_31,
  1, 32, :_reduce_32,
  2, 32, :_reduce_33,
  1, 24, :_reduce_34,
  2, 30, :_reduce_35,
  1, 30, :_reduce_none ]

racc_reduce_n = 37

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :T_STRING => 2,
  :T_TEXT => 3,
  :T_DOCTYPE_START => 4,
  :T_DOCTYPE_END => 5,
  :T_DOCTYPE_TYPE => 6,
  :T_CDATA_START => 7,
  :T_CDATA_END => 8,
  :T_COMMENT_START => 9,
  :T_COMMENT_END => 10,
  :T_ELEM_OPEN => 11,
  :T_ELEM_NAME => 12,
  :T_ELEM_NS => 13,
  :T_ELEM_CLOSE => 14,
  :T_ATTR => 15 }

racc_nt_base = 16

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_STRING",
  "T_TEXT",
  "T_DOCTYPE_START",
  "T_DOCTYPE_END",
  "T_DOCTYPE_TYPE",
  "T_CDATA_START",
  "T_CDATA_END",
  "T_COMMENT_START",
  "T_COMMENT_END",
  "T_ELEM_OPEN",
  "T_ELEM_NAME",
  "T_ELEM_NS",
  "T_ELEM_CLOSE",
  "T_ATTR",
  "$start",
  "document",
  "expressions",
  "expression",
  "doctype",
  "cdata",
  "comment",
  "element",
  "text",
  "element_open",
  "attributes",
  "element_body",
  "elements",
  "element_body_",
  "texts",
  "attributes_",
  "attribute" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_1(val, _values)
     s(:document, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_2(val, _values)
     s(:document) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_3(val, _values)
     val.compact 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_10(val, _values)
     s(:doctype) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_11(val, _values)
            s(:doctype, val[1])
      
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_12(val, _values)
            s(:doctype, val[1], val[2])
      
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_13(val, _values)
            s(:doctype, val[1], val[2], val[3])
      
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_14(val, _values)
     s(:cdata) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_15(val, _values)
     s(:cdata, val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_16(val, _values)
     s(:comment) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_17(val, _values)
     s(:comment, val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_18(val, _values)
            namespace, name = val[0]

        s(name, namespace, val[1], val[2])
      
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_19(val, _values)
     [nil, val[1].to_sym] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_20(val, _values)
     [val[1], val[2].to_sym] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_21(val, _values)
     val 
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_23(val, _values)
     val 
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_25(val, _values)
     nil 
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_28(val, _values)
     s(:attributes, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_29(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_30(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_31(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_32(val, _values)
     s(:attribute, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_33(val, _values)
     s(:attribute, val[0], val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_34(val, _values)
     s(:text, val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_35(val, _values)
     val 
  end
.,.,

# reduce 36 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Oga
