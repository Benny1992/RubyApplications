#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module CakeLang
  class Parser < Racc::Parser


  def parse(tokens)
    @tokens = tokens

    do_parse
  end

  #
  # Returns the next token to process
  # @return [Array]
  #
  def next_token
    @tokens.shift
  end
##### State transition tables begin ###

racc_action_table = [
    17,    18,    17,    18,    17,    18,    17,    18,    17,    18,
    17,    18,    16,    19,    16,    20,    16,    11,    16,    10,
    16,     9,    16,    17,    18,    17,    18,    22,    25,    24,
    23,    26,    27,     7,    14,    16,     6,    16,     5,     4,
     3 ]

racc_action_check = [
    27,    27,    26,    26,    25,    25,    24,    24,    14,    14,
    22,    22,    27,    11,    26,    12,    25,     9,    24,     8,
    14,     7,    22,    10,    10,    23,    23,    15,    15,    15,
    15,    15,    15,     5,    10,    10,     4,    23,     3,     1,
     0 ]

racc_action_pointer = [
    29,    39,   nil,    24,    36,    17,   nil,     7,     4,    -1,
    21,    -1,     3,   nil,     6,    23,   nil,   nil,   nil,   nil,
   nil,   nil,     8,    23,     4,     2,     0,    -2,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
   -16,   -16,    -1,   -16,   -16,   -16,    34,    -4,   -16,   -16,
   -16,   -16,   -16,    -5,   -16,   -16,   -13,   -14,   -15,    -3,
    -2,    -6,   -16,   -16,   -16,   -16,   -16,   -16,    -7,    -8,
    -9,   -10,   -11,   -12 ]

racc_goto_table = [
    28,    29,    30,    31,    32,    33,    13,    12,     8,     2,
    21,     1 ]

racc_goto_check = [
     6,     6,     6,     6,     6,     6,     5,     4,     3,     2,
     5,     1 ]

racc_goto_pointer = [
   nil,    11,     9,     1,    -3,    -4,   -22 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    15 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 20, :_reduce_1,
  7, 21, :_reduce_2,
  3, 22, :_reduce_3,
  0, 22, :_reduce_4,
  1, 23, :_reduce_5,
  2, 23, :_reduce_6,
  3, 24, :_reduce_7,
  3, 24, :_reduce_8,
  3, 24, :_reduce_9,
  3, 24, :_reduce_10,
  3, 24, :_reduce_11,
  3, 24, :_reduce_12,
  1, 25, :_reduce_none,
  1, 25, :_reduce_14,
  1, 25, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 34

racc_token_table = {
  false => 0,
  :error => 1,
  :T_INT => 2,
  :T_FLOAT => 3,
  :T_ADD => 4,
  :T_DIV => 5,
  :T_MUL => 6,
  :T_SUB => 7,
  :T_MOD => 8,
  :T_EXP => 9,
  :T_EQL => 10,
  :T_KEYWORD_DEF => 11,
  :T_KEYWORD_END => 12,
  :T_KEYWORD_OUT => 13,
  :T_LITERAL => 14,
  :T_RBR => 15,
  :T_LBR => 16,
  :T_DQUOTE => 17,
  :T_COL => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T_INT",
  "T_FLOAT",
  "T_ADD",
  "T_DIV",
  "T_MUL",
  "T_SUB",
  "T_MOD",
  "T_EXP",
  "T_EQL",
  "T_KEYWORD_DEF",
  "T_KEYWORD_END",
  "T_KEYWORD_OUT",
  "T_LITERAL",
  "T_RBR",
  "T_LBR",
  "T_DQUOTE",
  "T_COL",
  "$start",
  "program",
  "defn",
  "arglist",
  "method_definition",
  "operation",
  "var" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = [:program, val[0]] 
    result
end

def _reduce_2(val, _values, result)
      result = [:defn, val[1], val[3], val[5]]
    
    result
end

def _reduce_3(val, _values, result)
      result = [:arglist]
      val.each do |value|
        result << value unless value.eql?(',')
      end
    
    result
end

def _reduce_4(val, _values, result)
 result = [:arglist, nil] 
    result
end

def _reduce_5(val, _values, result)
 result = [:inner, val[0]] 
    result
end

def _reduce_6(val, _values, result)
 result = [:inner, val[0], val[1]] 
    result
end

def _reduce_7(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

def _reduce_8(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

def _reduce_9(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

def _reduce_10(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

def _reduce_11(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

def _reduce_12(val, _values, result)
 result = [:op, val[1].to_sym, val[0], val[2]] 
    result
end

# reduce 13 omitted

def _reduce_14(val, _values, result)
 result = [:int, val[0]] 
    result
end

def _reduce_15(val, _values, result)
 result = [:float, val[0]] 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module CakeLang
